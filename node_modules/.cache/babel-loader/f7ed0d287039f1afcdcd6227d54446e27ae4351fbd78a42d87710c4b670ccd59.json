{"ast":null,"code":"var _jsxFileName = \"/Users/zoe/Desktop/Independent/timer/my-app/src/components/MonthlyBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Bar } from \"react-chartjs-2\";\nimport { startOfMonth, endOfMonth, getDaysInMonth } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MonthlyBarChart = () => {\n  _s();\n  const [monthData, setMonthData] = useState({});\n  const [email, setEmail] = useState(\"\");\n  useEffect(() => {\n    const fetchData = async () => {\n      const storedEmail = localStorage.getItem(\"email\");\n      if (!storedEmail) {\n        console.error(\"Email not found in local storage\");\n        return;\n      }\n      setEmail(storedEmail);\n      const result = await axios.post(\"https://www.zoelindev.com/timer/API/bar.php\", {\n        email: storedEmail\n      });\n      setMonthData(result.data.monthData);\n    };\n    fetchData();\n  }, []);\n  const monthDataLabels = Array.from(Array(getDaysInMonth(new Date())), (_, i) => (i + 1).toString());\n  const monthDataValues = Array.from(Array(getDaysInMonth(new Date())), (_, i) => {\n    const date = new Date();\n    date.setDate(i + 1);\n    const formattedDate = date.toISOString().split(\"T\")[0];\n    const seconds = monthData[formattedDate] || 0;\n    return Math.floor(seconds / 60); // turn seconds to mins\n  });\n\n  const monthChartData = {\n    labels: monthDataLabels,\n    datasets: [{\n      label: \"\",\n      data: monthDataValues,\n      backgroundColor: monthDataValues.map((_, i) => `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.2)`),\n      borderColor: monthDataValues.map((_, i) => `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`),\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: monthChartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyBarChart, \"rC7dSOi+EU6M4/XbBbNddwIFb3U=\");\n_c = MonthlyBarChart;\nexport default MonthlyBarChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyBarChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","startOfMonth","endOfMonth","getDaysInMonth","jsxDEV","_jsxDEV","MonthlyBarChart","_s","monthData","setMonthData","email","setEmail","fetchData","storedEmail","localStorage","getItem","console","error","result","post","data","monthDataLabels","Array","from","Date","_","i","toString","monthDataValues","date","setDate","formattedDate","toISOString","split","seconds","Math","floor","monthChartData","labels","datasets","label","backgroundColor","map","random","borderColor","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zoe/Desktop/Independent/timer/my-app/src/components/MonthlyBarChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Bar } from \"react-chartjs-2\";\nimport { startOfMonth, endOfMonth, getDaysInMonth } from \"date-fns\";\n\nconst MonthlyBarChart = () => {\n  const [monthData, setMonthData] = useState({});\n  const [email, setEmail] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const storedEmail = localStorage.getItem(\"email\");\n      if (!storedEmail) {\n        console.error(\"Email not found in local storage\");\n        return;\n      }\n\n      setEmail(storedEmail);\n\n      const result = await axios.post(\n        \"https://www.zoelindev.com/timer/API/bar.php\",\n        {\n          email: storedEmail,\n        }\n      );\n      setMonthData(result.data.monthData);\n    };\n\n    fetchData();\n  }, []);\n\n  const monthDataLabels = Array.from(Array(getDaysInMonth(new Date())), (_, i) =>\n    (i + 1).toString()\n  );\n  const monthDataValues = Array.from(Array(getDaysInMonth(new Date())), (_, i) => {\n    const date = new Date();\n    date.setDate(i + 1);\n    const formattedDate = date.toISOString().split(\"T\")[0];\n    const seconds = monthData[formattedDate] || 0;\n    return Math.floor(seconds / 60); // turn seconds to mins\n  });\n\n  const monthChartData = {\n    labels: monthDataLabels,\n    datasets: [\n      {\n        label: \"\",\n        data: monthDataValues,\n        backgroundColor: monthDataValues.map((_, i) =>\n          `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(\n            Math.random() * 256\n          )}, ${Math.floor(Math.random() * 256)}, 0.2)`\n        ),\n        borderColor: monthDataValues.map((_, i) =>\n          `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(\n            Math.random() * 256\n          )}, ${Math.floor(Math.random() * 256)})`\n        ),\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <Bar data={monthChartData} />\n    </div>\n  );\n};\n\nexport default MonthlyBarChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}