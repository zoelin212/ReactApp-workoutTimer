[{"/Users/zoe/Desktop/Independent/timer/my-app/src/index.js":"1","/Users/zoe/Desktop/Independent/timer/my-app/src/App.js":"2","/Users/zoe/Desktop/Independent/timer/my-app/src/pages/Login.js":"3","/Users/zoe/Desktop/Independent/timer/my-app/src/pages/Register.js":"4","/Users/zoe/Desktop/Independent/timer/my-app/src/pages/Timer.js":"5","/Users/zoe/Desktop/Independent/timer/my-app/src/pages/Report.js":"6","/Users/zoe/Desktop/Independent/timer/my-app/src/components/Header.js":"7","/Users/zoe/Desktop/Independent/timer/my-app/src/components/WeeklyBarChart.js":"8","/Users/zoe/Desktop/Independent/timer/my-app/src/components/MonthlyBarChart.js":"9","/Users/zoe/Desktop/Independent/timer/my-app/src/components/Calories.js":"10"},{"size":337,"mtime":1679525927368,"results":"11","hashOfConfig":"12"},{"size":575,"mtime":1679525870879,"results":"13","hashOfConfig":"12"},{"size":2302,"mtime":1679513578429,"results":"14","hashOfConfig":"12"},{"size":2283,"mtime":1679512931837,"results":"15","hashOfConfig":"12"},{"size":10970,"mtime":1679535719652,"results":"16","hashOfConfig":"12"},{"size":2138,"mtime":1679535712233,"results":"17","hashOfConfig":"12"},{"size":434,"mtime":1678594996822,"results":"18","hashOfConfig":"12"},{"size":2445,"mtime":1679535715635,"results":"19","hashOfConfig":"12"},{"size":2339,"mtime":1679535714265,"results":"20","hashOfConfig":"12"},{"size":1945,"mtime":1679524626691,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1ole0ft",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/zoe/Desktop/Independent/timer/my-app/src/index.js",[],[],[],"/Users/zoe/Desktop/Independent/timer/my-app/src/App.js",["57"],[],"import './App.css';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Timer from './pages/Timer';\nimport Report from './pages/Report';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes>\n            <Route path=\"/\" element={<Login />}/>\n            <Route path=\"register\" element={<Register />}/>\n            <Route path=\"timer\" element={<Timer />}/>\n            <Route path=\"report\" element={<Report />}/>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/zoe/Desktop/Independent/timer/my-app/src/pages/Login.js",[],[],"/Users/zoe/Desktop/Independent/timer/my-app/src/pages/Register.js",[],[],"/Users/zoe/Desktop/Independent/timer/my-app/src/pages/Timer.js",["58","59"],[],"import { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faDumbbell,\n  faCirclePlay,\n  faCirclePause,\n  faRotateLeft,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport Header from '../components/Header';\n\n//API\nconst saveToDatabase = async (date, total, email) => {\n  try {\n    const response = await axios.post(\"https://www.zoelindev.com/timer/API/count.php\", {\n      date,\n      total,\n      email\n    });\n\n    console.log(response.data);\n  } catch (error) {\n    console.error(\"Error saving to database:\", error);\n  }\n};\n\nconst Timer = () => {\n  const [workTime, setWorkTime] = useState({ minutes: 0, seconds: 0 });\n  const [restTime, setRestTime] = useState({ minutes: 0, seconds: 0 });\n  const [sets, setSets] = useState(1);\n  const [currentSet, setCurrentSet] = useState(1);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isRest, setIsRest] = useState(false);\n\n  //fix moving num in input\n  const [workTimeSetting, setWorkTimeSetting] = useState({ minutes: 0, seconds: 0 });\n  const [restTimeSetting, setRestTimeSetting] = useState({ minutes: 0, seconds: 0 });\n\n  // Add accumulatedTime state\n  const [accumulatedTime, setAccumulatedTime] = useState(0);\n\n  const now = new Date();\n  const timezoneOffset = now.getTimezoneOffset() * 60000;\n  const localISOTime = new Date(now - timezoneOffset).toISOString().slice(0, 10);\n\n  // Save accumulatedTime to the database\n  const saveAccumulatedTime = async () => {\n    if (accumulatedTime > 0) {\n      const now = new Date();\n      const timezoneOffset = now.getTimezoneOffset() * 60000;\n      const localISOTime = new Date(now - timezoneOffset).toISOString().slice(0, 10);\n      const total = accumulatedTime;\n      const email = localStorage.getItem(\"email\");\n      await saveToDatabase(localISOTime, total, email);\n      setAccumulatedTime(0);\n    }\n  };\n  \n\n\n  useEffect(() => {\n    if (!isRunning) return;\n    const timerId = setInterval(() => {\n      handleTick();\n    }, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, [isRunning, isRest, workTime, restTime]);\n\n\n  const handleWorkTime = (minutes, seconds) => {\n    const totalSeconds = minutes * 60 + seconds;\n    setWorkTimeSetting({ minutes: Math.floor(totalSeconds / 60), seconds: totalSeconds % 60 });\n  };\n\n  const handleRestTime = (minutes, seconds) => {\n    const totalSeconds = minutes * 60 + seconds;\n    setRestTimeSetting({ minutes: Math.floor(totalSeconds / 60), seconds: totalSeconds % 60 });\n  };\n\n  const handleSets = (num) => {\n    if (num === 0) {\n      setSets(\"NAH\");\n    } else {\n      setSets(num);\n    }\n  };\n\n  const handleReset = async () => {\n    setIsRunning(false);\n    setCurrentSet(1);\n    setIsRest(false);\n\n    //let timer back to user setting\n    // setWorkTime({ minutes: workTimeSetting.minutes, seconds: workTimeSetting.seconds });\n    // setRestTime({ minutes: restTimeSetting.minutes, seconds: restTimeSetting.seconds });\n\n    //let timer back to 0\n    setWorkTime({ minutes: 0, seconds: 0 });\n    setRestTime({ minutes: 0, seconds: 0 });\n\n    // Save accumulatedTime to the database before resetting\n    await saveAccumulatedTime();\n  };\n\n  const handleStart = () => {\n    if (sets !== \"NAH\" && sets > 0) {\n      const goAudio = document.getElementById(\"goAudio\");\n      const biAudio = document.getElementById(\"biAudio\");\n\n      goAudio.play();\n\n      goAudio.addEventListener(\"ended\", () => {\n        biAudio.play();\n      });\n      setIsRunning(true);\n      if (isRest) {\n        setRestTime({ minutes: restTimeSetting.minutes, seconds: restTimeSetting.seconds });\n      } else {\n        setWorkTime({ minutes: workTimeSetting.minutes, seconds: workTimeSetting.seconds });\n      }\n    }\n  };\n\n\n  const handlePause = async () => {\n    setIsRunning(false);\n    await saveAccumulatedTime();\n  };\n\n\n  const handleTick = () => {\n    if (isRest) {\n      if (restTime.minutes === 0 && restTime.seconds === 0) {\n        document.getElementById(\"biAudio\").play();\n        if (currentSet === sets) {\n          setIsRunning(false);\n          setCurrentSet(1);\n          setIsRest(false);\n          setWorkTime({ minutes: workTimeSetting.minutes, seconds: workTimeSetting.seconds });\n          // 在完成所有组后保存累积时间\n          saveAccumulatedTime();\n        } else {\n          setCurrentSet(currentSet + 1);\n          setIsRest(false);\n          setWorkTime({ minutes: workTimeSetting.minutes, seconds: workTimeSetting.seconds });\n        }\n      } else if (restTime.seconds === 0) {\n        setRestTime({ minutes: restTime.minutes - 1, seconds: 59 });\n      } else {\n        setRestTime({ ...restTime, seconds: restTime.seconds - 1 });\n      }\n    } else {\n      if (workTime.minutes === 0 && workTime.seconds === 0) {\n        document.getElementById(\"biAudio\").play();\n        setIsRest(true);\n        setRestTime({ minutes: restTimeSetting.minutes, seconds: restTimeSetting.seconds });\n      } else if (workTime.seconds === 0) {\n        setWorkTime({ minutes: workTime.minutes - 1, seconds: 59 });\n      } else {\n        setWorkTime({ ...workTime, seconds: workTime.seconds - 1 });\n      }\n    }\n    // Increment accumulatedTime when the timer is running\n    setAccumulatedTime((prev) => prev + 1);\n    console.log(accumulatedTime);\n  };\n\n  const formatTime = (timeObj) => {\n    const { minutes, seconds } = timeObj;\n    const formattedMinutes = minutes.toString().padStart(2, \"0\");\n    const formattedSeconds = seconds.toString().padStart(2, \"0\");\n    return `${formattedMinutes}:${formattedSeconds}`;\n  };\n\n  const handleKeyPress = (e) => {\n    const keyCode = e.keyCode || e.which;\n    const keyValue = String.fromCharCode(keyCode);\n    const regex = /^\\d$/; // Only allow digits\n\n    if (!regex.test(keyValue) && keyCode !== 8 && keyCode !== 13 && keyCode !== 37 && keyCode !== 39) {\n      e.preventDefault();\n    }\n  };\n\n  const color = isRest ? \"var(--blue)\" : \"var(--orange)\";\n\n  return (\n    <div className=\"timerPage\">\n      <Header />\n      <audio id=\"goAudio\" src=\"./mp3/go.mp3\" preload=\"auto\" />\n      <audio id=\"biAudio\" src=\"./mp3/bi.mp3\" preload=\"auto\" />\n\n      <div className=\"timer\">\n        <div className=\"colorChange\" style={{ backgroundColor: color }}>\n          <div className=\"timeDisplay\">{formatTime(isRest ? restTime : workTime)}</div>\n          <div className=\"current\">{isRest ? \"- Rest -\" : \"- Work -\"}</div>\n        </div>\n        <FontAwesomeIcon icon={faDumbbell} />\n        <div className=\"setsDisplay\">{`Set ${currentSet} of ${sets}`}</div>\n        <div className=\"controlButtons\">\n          {isRunning ? (\n            <FontAwesomeIcon icon={faCirclePause} onClick={handlePause} />\n          ) : (\n            <FontAwesomeIcon icon={faCirclePlay} onClick={handleStart} />\n          )}\n          <FontAwesomeIcon icon={faRotateLeft} onClick={handleReset} />\n        </div>\n      </div>\n      <div className=\"settings\">\n        <div className=\"workTime\">\n          <label>Work</label>\n\n          <div>\n            <input type=\"text\"\n              maxLength=\"2\"\n              pattern=\"\\d*\"\n              value={workTimeSetting.minutes}\n              onChange={(e) => {\n                const time = parseInt(e.target.value, 10) || 0;\n                handleWorkTime(time, workTimeSetting.seconds);\n              }}\n              onKeyDown={handleKeyPress}\n              onClick={(e) => {\n                if (e.target.value === \"00\" || e.target.value === \"0\") {\n                  e.target.value = \"\";\n                }\n              }}\n              onBlur={(e) => {\n                if (e.target.value === \"\") {\n                  e.target.value = \"0\";\n                }\n              }}\n              disabled={isRunning}\n            />\n            <span>:</span>\n            <input type=\"text\"\n              maxLength=\"2\"\n              pattern=\"\\d*\"\n              value={workTimeSetting.seconds}\n              onChange={(e) => {\n                const time = parseInt(e.target.value, 10) || 0;\n                handleWorkTime(workTimeSetting.minutes, time);\n              }}\n              onKeyDown={handleKeyPress}\n              onClick={(e) => {\n                if (e.target.value === \"00\" || e.target.value === \"0\") {\n                  e.target.value = \"\";\n                }\n              }}\n              onBlur={(e) => {\n                if (e.target.value === \"\") {\n                  e.target.value = \"0\";\n                }\n              }}\n              disabled={isRunning}\n            />\n          </div>\n\n        </div>\n        <div className=\"restTime\">\n          <label>Rest</label>\n\n          <div>\n          <input type=\"text\"\n            maxLength=\"2\"\n            pattern=\"\\d*\"\n            value={restTimeSetting.minutes}\n            onChange={(e) => {\n              const time = parseInt(e.target.value, 10) || 0;\n              handleRestTime(time, restTimeSetting.seconds);\n            }}\n            onKeyDown={handleKeyPress}\n            onClick={(e) => {\n              if (e.target.value === \"00\" || e.target.value === \"0\") {\n                e.target.value = \"\";\n              }\n            }}\n            onBlur={(e) => {\n              if (e.target.value === \"\") {\n                e.target.value = \"0\";\n              }\n            }}\n            disabled={isRunning}\n          />\n          <span>:</span>\n          <input type=\"text\"\n            maxLength=\"2\"\n            pattern=\"\\d*\"\n            value={restTimeSetting.seconds}\n            onChange={(e) => {\n              const time = parseInt(e.target.value, 10) || 0;\n              handleRestTime(restTimeSetting.minutes, time);\n            }}\n            onKeyDown={handleKeyPress}\n            onClick={(e) => {\n              if (e.target.value === \"00\" || e.target.value === \"0\") {\n                e.target.value = \"\";\n              }\n            }}\n            onBlur={(e) => {\n              if (e.target.value === \"\") {\n                e.target.value = \"0\";\n              }\n            }}\n            disabled={isRunning}\n          />\n          </div>\n\n        </div>\n        <div className=\"sets\">\n          <label>Sets</label>\n\n          <div>\n            <span>x</span>\n            <input \n              className=\"setNum\"\n              type=\"number\"\n              min=\"0\"\n              max=\"20\"\n              value={sets}\n              onChange={(e) => {\n                const num = parseInt(e.target.value, 10);\n                handleSets(num);\n              }}\n              onClick={(e) => {\n                if (e.target.value === \"00\" || e.target.value === \"0\") {\n                  e.target.value = \"\";\n                }\n              }}\n              onBlur={(e) => {\n                if (e.target.value === \"\") {\n                  e.target.value = \"1\";\n                  handleSets(\"1\");\n                }\n              }}\n              onKeyDown={handleKeyPress}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Timer;\n\n\n","/Users/zoe/Desktop/Independent/timer/my-app/src/pages/Report.js",[],[],"/Users/zoe/Desktop/Independent/timer/my-app/src/components/Header.js",[],[],"/Users/zoe/Desktop/Independent/timer/my-app/src/components/WeeklyBarChart.js",["60","61","62"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Bar } from \"react-chartjs-2\";\nimport { getWeek, startOfWeek } from \"date-fns\";\nimport { utcToZonedTime, zonedTimeToUtc } from \"date-fns-tz\";\n\n\nconst WeeklyBarChart = () => {\n  const [weekData, setWeekData] = useState({});\n  const [email, setEmail] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const storedEmail = localStorage.getItem(\"email\");\n      if (!storedEmail) {\n        console.error(\"Email not found in local storage\");\n        return;\n      }\n\n      setEmail(storedEmail);\n\n      const result = await axios.post(\n        \"https://www.zoelindev.com/timer/API/bar.php\",\n        {\n          email: storedEmail,\n        }\n      );\n      setWeekData(result.data.weekData);\n    };\n\n    fetchData();\n  }, []);\n\n  const weekDataLabels = [\n    \"S\",\n    \"M\",\n    \"T\",\n    \"W\",\n    \"T\",\n    \"F\",\n    \"S\",\n  ];\n\n  const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  const currentDate = new Date();\n  const zonedDate = utcToZonedTime(currentDate, timeZone);\n  const currentWeek = getWeek(zonedDate);\n  const weekStartDate = startOfWeek(zonedDate);\n\n\n  const weekDataValues = Array.from(Array(7), (_, i) => {\n    const date = new Date(weekStartDate);\n    date.setDate(date.getDate() + i);\n    const formattedDate = date.toISOString().split(\"T\")[0];\n    return parseFloat((weekData[formattedDate] || 0) / 60).toFixed(1); // turn seconds to mins\n  });\n  \n\n  const weekChartData = {\n    labels: weekDataLabels,\n    datasets: [\n      {\n        label: \"null\",\n        data: weekDataValues,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(201, 203, 207, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n          \"rgb(201, 203, 207)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const weekChartOptions = {\n    legend: {\n      display: false,\n    },\n    \n  };\n\n  return (\n      <div>\n        <Bar data={weekChartData} options={weekChartOptions}/>\n      </div>\n    \n  );\n};\n\nexport default WeeklyBarChart;\n","/Users/zoe/Desktop/Independent/timer/my-app/src/components/MonthlyBarChart.js",["63","64","65"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Bar } from \"react-chartjs-2\";\nimport { startOfMonth, endOfMonth, getDaysInMonth } from \"date-fns\";\n\nconst MonthlyBarChart = () => {\n  const [monthData, setMonthData] = useState({});\n  const [email, setEmail] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const storedEmail = localStorage.getItem(\"email\");\n      if (!storedEmail) {\n        console.error(\"Email not found in local storage\");\n        return;\n      }\n\n      setEmail(storedEmail);\n\n      const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      const result = await axios.post(\n        \"https://www.zoelindev.com/timer/API/bar.php\",\n        {\n          email: storedEmail,\n          timeZone,\n        }\n      );\n      setMonthData(result.data.monthData);\n    };\n\n    fetchData();\n  }, []);\n\n  const timeZoneOffset = new Date().getTimezoneOffset() * 60000; // getTimezoneOffset returns minutes, convert to milliseconds\n  const localDate = new Date(Date.now() - timeZoneOffset);\n\n  const monthDataLabels = Array.from(Array(getDaysInMonth(localDate)), (_, i) =>\n    (i + 1).toString()\n  );\n  const monthDataValues = Array.from(Array(getDaysInMonth(localDate)), (_, i) => {\n    const date = new Date(localDate);\n    date.setDate(i + 1);\n    const formattedDate = date.toISOString().split(\"T\")[0];\n    const seconds = monthData[formattedDate] || 0;\n    return Math.floor(seconds / 60); // turn seconds to mins\n  });\n\n  const monthChartData = {\n    labels: monthDataLabels,\n    datasets: [\n      {\n        label: \"\",\n        data: monthDataValues,\n        backgroundColor: monthDataValues.map((_, i) =>\n          `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(\n            Math.random() * 256\n          )}, ${Math.floor(Math.random() * 256)}, 0.2)`\n        ),\n        borderColor: monthDataValues.map((_, i) =>\n          `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(\n            Math.random() * 256\n          )}, ${Math.floor(Math.random() * 256)})`\n        ),\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const monthChartOptions = {\n    legend: {\n      display: false,\n    },\n    \n  };\n\n  return (\n    <div>\n      <Bar data={monthChartData} options={monthChartOptions}/>\n    </div>\n  );\n};\n\nexport default MonthlyBarChart;\n","/Users/zoe/Desktop/Independent/timer/my-app/src/components/Calories.js",[],[],{"ruleId":"66","severity":1,"message":"67","line":2,"column":10,"nodeType":"68","messageId":"69","endLine":2,"endColumn":20},{"ruleId":"66","severity":1,"message":"70","line":44,"column":9,"nodeType":"68","messageId":"69","endLine":44,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":69,"column":6,"nodeType":"73","endLine":69,"endColumn":45,"suggestions":"74"},{"ruleId":"66","severity":1,"message":"75","line":5,"column":26,"nodeType":"68","messageId":"69","endLine":5,"endColumn":40},{"ruleId":"66","severity":1,"message":"76","line":10,"column":10,"nodeType":"68","messageId":"69","endLine":10,"endColumn":15},{"ruleId":"66","severity":1,"message":"77","line":47,"column":9,"nodeType":"68","messageId":"69","endLine":47,"endColumn":20},{"ruleId":"66","severity":1,"message":"78","line":4,"column":10,"nodeType":"68","messageId":"69","endLine":4,"endColumn":22},{"ruleId":"66","severity":1,"message":"79","line":4,"column":24,"nodeType":"68","messageId":"69","endLine":4,"endColumn":34},{"ruleId":"66","severity":1,"message":"76","line":8,"column":10,"nodeType":"68","messageId":"69","endLine":8,"endColumn":15},"no-unused-vars","'HashRouter' is defined but never used.","Identifier","unusedVar","'localISOTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleTick'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'zonedTimeToUtc' is defined but never used.","'email' is assigned a value but never used.","'currentWeek' is assigned a value but never used.","'startOfMonth' is defined but never used.","'endOfMonth' is defined but never used.",{"desc":"81","fix":"82"},"Update the dependencies array to be: [isRunning, isRest, workTime, restTime, handleTick]",{"range":"83","text":"84"},[2102,2141],"[isRunning, isRest, workTime, restTime, handleTick]"]